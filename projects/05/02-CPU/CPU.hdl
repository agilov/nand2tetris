// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // The 16-bit value of the CPU’s instruction input represents either an A-instruction or a Cinstruction.
    // In order to figure out the semantics of this instruction, we can parse, or unpack it,
    // into the following fields: “ixxaccccccdddjjj”.
    // The i-bit (also known as opcode) codes the
    //   instruction type, which is either 0 for an A-instruction or 1 for a C-instruction.
    // In case of an Ainstruction, the entire instruction represent the 16-bit value of the constant
    // that should be loaded into the A register.
    // In case of a C-instruction, the a- and c-bits code the comp part of the instruction,
    // while the d- and j-bits code the dest and jump parts of the instruction, respectively
    // (the x-bits are not used, and can be ignored).

    // Route between A opcode and C opcode
    Not(in=instruction[15], out=opcodeA);
    Or(a=instruction[15], b=false, out=opcodeC);
    Mux16(a=instruction, b=aluOut, sel=opcodeC, out=inputA);

    // First d controls alu output to register A
    Or(a=opcodeA, b=instruction[5], out=loadA);

    // A register is loaded if 15-th bit of instruction is 0
    ARegister(in=inputA, load=loadA, out=outA);

    // Instruction Execution
    // The decoded fields of the instruction (i-, a-, c-, d-, and j-bits) are routed simultaneously to
    // various parts of the CPU architecture, where they cause different chip-parts to do what they are
    // supposed to do in order to execute either the A- or the C-instruction, as mandated by the Hack
    // machine language specification. In the case of a C-instruction, the single a-bit determines
    // whether the ALU will operate on the A register input or on the M input,

    // In the case of a C-instruction, the single a-bit determines
    // whether the ALU will operate on the A register input or on the M input
    // a-bit is 12-th bit of the instruction.
    Mux16(a=outA, b=inM, sel=instruction[12], out=aluY);

    // Six c-bits determine which function the ALU will compute.
    Or(a=false, b=instruction[11], out=aluZX);
    Or(a=false, b=instruction[10], out=aluNX);
    Or(a=false, b=instruction[9], out=aluZY);
    Or(a=false, b=instruction[8], out=aluNY);
    Or(a=false, b=instruction[7], out=aluAND);
    Or(a=false, b=instruction[6], out=aluNO);

    // ALU
    ALU(
        x=outD, y=aluY,
        zx=aluZX, nx=aluNX, zy=aluZY, ny=aluNY, f=aluAND, no=aluNO,
        out=aluOut, zr=aluZeroOut, ng=aluNegativeOut
    );

    // Working out j bits
    And(a=aluZeroOut, b=instruction[1], out=jumpZero);
    And(a=aluNegativeOut, b=instruction[2], out=jumpLess);
    Or(a=aluZeroOut, b=aluNegativeOut, out=aluOutNegativeOrZero);
    Not(in=aluOutNegativeOrZero, out=aluOutPositive);
    And(a=aluOutPositive, b=instruction[0], out=jumpGreater);

    // Third d controls alu output to memory (outM)
    Mux16(a[0]=false, b=aluOut, sel=instruction[3], out=outM);
    // but writes to memory only if it is opcode C and third d is set
    And(a=instruction[3], b=opcodeC, out=writeM);

    // The three d-bits are used to determine which registers should “accept” the ALU resulting output.

    // B register
    // Second d (4-th bit) controls alu output to register D
    // but writes only if it is opcode C and third d is set
    And(a=instruction[4], b=opcodeC, out=writeD);
    DRegister(in=aluOut, load=writeD, out=outD);

    // PC (program counter)
    // If one of j bit is 1 - we load the PC with value of register A
    Or(a=jumpZero, b=jumpLess, out=jumpZeroOrLess);
    Or(a=jumpGreater, b=jumpZeroOrLess, out=pcLoad);

    // If all zeroes then pcLoad will be 0 and pcInc will be 1
    Not(in=pcLoad, out=pcInc);
    // A opcode causes PC to increment in any case
    Or(a=pcInc, b=opcodeA, out=incrementPC);
    And(a=opcodeC, b=pcLoad, out=loadPC);

    PC(in=outA, load=loadPC, inc=incrementPC, reset=reset, out[0..14]=pc);


    Or16(a=outA, b[0]=false, out[0..14]=addressM);
}